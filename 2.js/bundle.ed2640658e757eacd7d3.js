webpackJsonp([2],{1522:function(n,e,t){var a=t(1),r=t(14),o=t(15).PageRenderer;o.__esModule&&(o=o.default);var s=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1555)}},componentWillMount:function(){},render:function(){return a.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,n.exports=s},1555:function(n,e){n.exports="Sometimes you might want to display data within a fixed container. That's where `reactabular-sticky` comes in. It includes logic keeping a table header and a table body in sync. Unfortunately you still need to dig DOM references yourself to achieve this given it relies on measuring.\n\n## API\n\nThe API is exactly the same as for `reactabular-table` apart from naming. Here you need to use `Sticky.Header` and `Sticky.Body` over `Table.Header` and `Table.Body`.\n\n## How to Use?\n\nThe following example implements sticky headers within a fixed viewport through `props`.\n\n```jsx\n/*\nimport React from 'react';\nimport { Table } from 'reactabular-table';\n// import * as Sticky from 'reactabular-sticky';\n\nimport { generateRows } from './helpers';\n*/\n\nconst schema = {\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    product: {\n      type: 'string'\n    },\n    company: {\n      type: 'string'\n    },\n    age: {\n      type: 'integer'\n    }\n  },\n  required: ['id', 'name', 'product', 'company', 'age']\n};\nconst rows = generateRows(100, schema);\n\nconst columns = [\n  {\n    property: 'name',\n    props: {\n      style: { minWidth: 300 }\n    },\n    header: {\n      label: 'Name'\n    }\n  },\n  {\n    property: 'age',\n    props: {\n      style: { minWidth: 100 }\n    },\n    header: {\n      label: 'Age'\n    }\n  },\n  {\n    property: 'company',\n    props: {\n      style: { minWidth: 400 }\n    },\n    header: {\n      label: 'Company'\n    }\n  },\n  {\n    property: 'product',\n    props: {\n      style: { minWidth: 400 }\n    },\n    header: {\n      label: 'Product'\n    }\n  }\n];\n\nclass StickyTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rows,\n      columns\n    };\n\n    this.tableHeader = null;\n    this.tableBody = null;\n  }\n  componentDidMount() {\n    // We have refs now. Force update to get those to Header/Body.\n    this.forceUpdate();\n  }\n  render() {\n    const { rows, columns } = this.state;\n\n    return (\n      <Table.Provider\n        className=\"pure-table pure-table-striped\"\n        columns={columns}\n      >\n        <Sticky.Header\n          style={{\n            maxWidth: 800\n          }}\n          ref={tableHeader => {\n            this.tableHeader = tableHeader && tableHeader.getRef();\n          }}\n          tableBody={this.tableBody}\n        />\n\n        <Sticky.Body\n          rows={rows}\n          rowKey=\"id\"\n          style={{\n            maxWidth: 800,\n            maxHeight: 400\n          }}\n          ref={tableBody => {\n            this.tableBody = tableBody && tableBody.getRef();\n          }}\n          tableHeader={this.tableHeader}\n        />\n      </Table.Provider>\n    );\n  }\n}\n\n<StickyTable />\n```\n"}});