webpackJsonp([19],{1516:function(n,e,o){var r=o(1),t=o(14),s=o(15).PageRenderer;s.__esModule&&(s=s.default);var a=t({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:o(1549)}},componentWillMount:function(){},render:function(){return r.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});a.__catalog_loader__=!0,n.exports=a},1549:function(n,e){n.exports="The following example shows how to handle dragging rows within a tree.\n\n**Example:**\n\n```jsx\n/*\nimport React from 'react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { compose } from 'redux';\nimport { cloneDeep, findIndex } from 'lodash';\nimport * as Table from 'reactabular-table';\nimport * as resolve from 'table-resolver';\nimport * as tree from 'treetabular';\nimport * as dnd from 'reactabular-dnd';\n\nimport {\n  generateParents, generateRows\n} from './helpers';\n*/\n\nconst schema = {\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'integer'\n    }\n  },\n  required: ['id', 'name', 'age']\n};\n\nclass DragAndDropTreeTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: this.getColumns(),\n      rows: generateParents(generateRows(100, schema))\n    };\n\n    this.onRow = this.onRow.bind(this);\n    this.onMoveRow = this.onMoveRow.bind(this);\n  }\n  getColumns() {\n    return [\n      {\n        property: 'name',\n        props: {\n          style: { width: 200 }\n        },\n        header: {\n          label: 'Name'\n        },\n        cell: {\n          formatters: [\n            tree.toggleChildren({\n              getRows: () => this.state.rows,\n              getShowingChildren: ({ rowData }) => rowData.showingChildren,\n              toggleShowingChildren: rowIndex => {\n                const rows = cloneDeep(this.state.rows);\n\n                rows[rowIndex].showingChildren = !rows[rowIndex].showingChildren;\n\n                this.setState({ rows });\n              }\n            })\n          ]\n        }\n      },\n      {\n        property: 'age',\n        props: {\n          style: { width: 300 }\n        },\n        header: {\n          label: 'Age'\n        }\n      }\n    ];\n  }\n  render() {\n    const renderers = {\n      header: {\n        cell: dnd.Header\n      },\n      body: {\n        row: dnd.Row\n      }\n    };\n    const { columns } = this.state;\n    const rows = compose(\n      tree.filter({ fieldName: 'showingChildren' }),\n      resolve.resolve({ columns, method: resolve.index })\n    )(this.state.rows);\n\n    return (\n      <Table.Provider\n        renderers={renderers}\n        columns={columns}\n      >\n        <Table.Header />\n\n        <Table.Body\n          rows={rows}\n          rowKey=\"id\"\n          onRow={this.onRow}\n        />\n      </Table.Provider>\n    );\n  }\n  onRow(row) {\n    return {\n      rowId: row.id,\n      onMove: o => this.onMoveRow(o)\n    };\n  }\n  onMoveRow({ sourceRowId, targetRowId }) {\n    const rows = tree.moveRows({\n      operation: dnd.moveRows({ sourceRowId, targetRowId }),\n      retain: ['showingChildren']\n    })(this.state.rows);\n\n    if (rows) {\n      this.setState({ rows });\n    }\n  }\n}\n\n// Set up drag and drop context\n//const DragAndDrop = DragDropContext(HTML5Backend)(DragAndDropTreeTable);\n\n<DragAndDropTreeTable />\n```\n"}});