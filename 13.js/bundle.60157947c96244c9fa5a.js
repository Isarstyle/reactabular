webpackJsonp([13],{1498:function(e,n,o){var t=o(1),r=o(14),s=o(15).PageRenderer;s.__esModule&&(s=s.default);var a=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:o(1531)}},componentWillMount:function(){},render:function(){return t.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});a.__catalog_loader__=!0,e.exports=a},1531:function(e,n){e.exports="Reactabular doesn't force you to style in any particular way. Instead, it provides enough flexibility for you to attach styling hooks to it as you see fit. This can be achieved by both the column and React definitions.\n\nThe project root contains a file, **style.css**, which you can import to your project. It sets styles related to sorting. It can be a good idea to use predefined styles like the ones provided by [Pure.css](http://purecss.io/) to save some effort.\n\n```react\n<Table.Provider\n  className=\"pure-table pure-table-striped\"\n  columns={columns}\n>\n  <Table.Header\n    className=\"header\"\n    onRow={(row, { rowIndex }) => {\n      return {\n        className: rowIndex % 2 ? 'odd-row' : 'even-row',\n      }\n    }}\n  />\n\n  <Table.Body\n    rows={rows}\n    rowKey=\"id\"\n    onRow={(row, { rowIndex }) => {\n      // Important! This gets called only when the row is updated. It is\n      // preferable to handle even/odd styling through CSS unless you\n      // override default shouldComponentUpdate behavior or use virtualization.\n      return {\n        className: rowIndex % 2 ? 'odd-row' : 'even-row',\n      }\n    }\n  }\n  />\n</Table.Provider>\n```\n\nIf you need even more control, override the default elements as discussed in the next section. You can also override styling on cell level by implementing [transforms](column-definition/transforms) that inject either `className`s or `style`.\n"}});