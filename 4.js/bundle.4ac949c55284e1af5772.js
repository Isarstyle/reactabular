webpackJsonp([4],{1515:function(n,e,o){var t=o(1),s=o(14),r=o(15).PageRenderer;r.__esModule&&(r=r.default);var a=s({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:o(1548)}},componentWillMount:function(){},render:function(){return t.createElement(r,Object.assign({},this.props,{content:this.state.content}))}});a.__catalog_loader__=!0,n.exports=a},1548:function(n,e){n.exports="`reactabular-dnd` provides [React DnD](https://gaearon.github.io/react-dnd/) based helpers for Reactabular.\n\n**Example:**\n\n```jsx\n/*\nimport React from 'react';\nimport { DragDropContext } from 'react-dnd';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport cloneDeep from 'lodash/cloneDeep';\nimport findIndex from 'lodash/findIndex';\nimport * as Table from 'reactabular-table';\nimport * as dnd from 'reactabular-dnd';\nimport * as resolve from 'table-resolver';\n*/\n\nconst rows = [\n  {\n    id: 1,\n    name: {\n      first: 'John',\n      last: 'Johnson'\n    },\n    company: 'John Inc.',\n    sentence: 'consequatur nihil minima corporis omnis nihil rem'\n  },\n  {\n    id: 2,\n    name: {\n      first: 'Mike',\n      last: 'Mikeson'\n    },\n    company: 'Mike Inc.',\n    sentence: 'a sequi doloremque sed id quo voluptatem voluptatem ut voluptatibus'\n  },\n  {\n    id: 3,\n    name: {\n      first: 'Jake',\n      last: 'Jackson'\n    },\n    company: 'Jake Inc.',\n    sentence: 'sed id quo voluptatem voluptatem ut voluptatibus'\n  },\n  {\n    id: 4,\n    name: {\n      first: 'Don',\n      last: 'Donson'\n    },\n    company: 'Don Inc.',\n    sentence: 'voluptatem voluptatem ut voluptatibus'\n  }\n];\n\nclass DragAndDropTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columns: [\n        {\n          props: {\n            style: {\n              width: 100\n            }\n          },\n          header: {\n            label: 'Name',\n            props: {\n              label: 'Name',\n              onMove: o => this.onMoveColumn(o)\n            }\n          },\n          children: [\n            {\n              property: 'name.first',\n              props: {\n                style: {\n                  width: 50\n                }\n              },\n              header: {\n                label: 'First Name',\n                props: {\n                  label: 'First Name',\n                  onMove: o => this.onMoveChildColumn(o)\n                }\n              }\n            },\n            {\n              property: 'name.last',\n              props: {\n                style: {\n                  width: 50\n                }\n              },\n              header: {\n                label: 'Last Name',\n                props: {\n                  label: 'Last Name',\n                  onMove: o => this.onMoveChildColumn(o)\n                }\n              }\n            }\n          ]\n        },\n        {\n          property: 'company',\n          props: {\n            label: 'Company',\n            style: {\n              width: 100\n            }\n          },\n          header: {\n            label: 'Company',\n            props: {\n              onMove: o => this.onMoveColumn(o)\n            }\n          }\n        },\n        {\n          property: 'sentence',\n          props: {\n            style: {\n              width: 300\n            }\n          },\n          header: {\n            label: 'Sentence',\n            props: {\n              label: 'Sentence',\n              onMove: o => this.onMoveColumn(o)\n            }\n          }\n        }\n      ],\n      rows\n    };\n\n    this.onRow = this.onRow.bind(this);\n    this.onMoveRow = this.onMoveRow.bind(this);\n    this.onMoveColumn = this.onMoveColumn.bind(this);\n    this.onMoveChildColumn = this.onMoveChildColumn.bind(this);\n  }\n  render() {\n    const renderers = {\n      header: {\n        cell: dnd.Header\n      },\n      body: {\n        row: dnd.Row\n      }\n    };\n    const { columns, rows } = this.state;\n    const resolvedColumns = resolve.columnChildren({ columns });\n    const resolvedRows = resolve.resolve({\n      columns: resolvedColumns,\n      method: resolve.nested\n    })(rows);\n\n    return (\n      <Table.Provider\n        renderers={renderers}\n        columns={resolvedColumns}\n      >\n        <Table.Header\n          headerRows={resolve.headerRows({ columns })}\n        />\n\n        <Table.Body\n          rows={resolvedRows}\n          rowKey=\"id\"\n          onRow={this.onRow}\n        />\n      </Table.Provider>\n    );\n  }\n  onRow(row) {\n    return {\n      rowId: row.id,\n      onMove: this.onMoveRow\n    };\n  }\n  onMoveRow({ sourceRowId, targetRowId }) {\n    const rows = dnd.moveRows({\n      sourceRowId,\n      targetRowId\n    })(this.state.rows);\n\n    if (rows) {\n      this.setState({ rows });\n    }\n  }\n  onMoveColumn(labels) {\n    const movedColumns = dnd.moveLabels(this.state.columns, labels);\n\n    if (movedColumns) {\n      // Retain widths to avoid flashing while drag and dropping.\n      const source = movedColumns.source;\n      const target = movedColumns.target;\n      const sourceWidth = source.props.style && source.props.style.width;\n      const targetWidth = target.props.style && target.props.style.width;\n\n      source.props.style = {\n        ...source.props.style,\n        width: targetWidth\n      };\n      target.props.style = {\n        ...target.props.style,\n        width: sourceWidth\n      };\n\n      this.setState({\n        columns: movedColumns.columns\n      });\n    }\n  }\n  onMoveChildColumn(labels) {\n    const movedChildren = dnd.moveChildrenLabels(this.state.columns, labels);\n\n    if (movedChildren) {\n      const columns = cloneDeep(this.state.columns);\n\n      columns[movedChildren.target].children = movedChildren.columns;\n\n      // Here we assume children have the same width.\n      this.setState({ columns });\n    }\n  }\n}\n\n// Set up drag and drop context\n//const DragAndDrop = DragDropContext(HTML5Backend)(DragAndDropTable);\n\n<DragAndDropTable />\n```\n"}});