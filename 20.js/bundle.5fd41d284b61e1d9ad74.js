webpackJsonp([20],{1513:function(n,e,a){var t=a(1),o=a(14),r=a(15).PageRenderer;r.__esModule&&(r=r.default);var s=o({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:a(1546)}},componentWillMount:function(){},render:function(){return t.createElement(r,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,n.exports=s},1546:function(n,e){n.exports="Reactabular doesn't come with pagination. Instead you can use an external library, such as [react-pagify](https://github.com/bebraw/react-pagify), for this purpose. Just like with sorting or search, you will have to process your rows through a paginator algorithm.\n\n**Example:**\n\n```jsx\n/*\nimport React from 'react';\nimport { compose } from 'redux';\nimport * as Table from 'reactabular-table';\nimport * as search from 'searchtabular';\nimport {\n  Paginator, paginate, generateRows\n} from './helpers';\n*/\n\nconst schema = {\n  type: 'object',\n  properties: {\n    id: {\n      type: 'string'\n    },\n    name: {\n      type: 'string'\n    },\n    age: {\n      type: 'integer'\n    }\n  },\n  required: ['id', 'name', 'age']\n};\nconst rows = generateRows(100, schema);\nconst columns = [\n  {\n    property: 'name',\n    header: {\n      label: 'Name'\n    }\n  },\n  {\n    property: 'age',\n    header: {\n      label: 'Age'\n    }\n  }\n];\n\nclass PaginationTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      searchColumn: 'all',\n      query: {}, // Search query\n      columns,\n      rows,\n      pagination: { // initial pagination settings\n        page: 1,\n        perPage: 10\n      }\n    };\n\n    this.onSelect = this.onSelect.bind(this);\n  }\n  render() {\n    const { searchColumn, rows, columns, pagination, query } = this.state;\n    const paginated = compose(\n      paginate(pagination),\n      search.multipleColumns({ columns, query })\n    )(rows);\n\n    return (\n      <div>\n        <div className=\"search-container\">\n          <span>Search</span>\n          <search.Field\n            column={searchColumn}\n            query={query}\n            columns={columns}\n            rows={rows}\n            onColumnChange={searchColumn => this.setState({ searchColumn })}\n            onChange={query => this.setState({ query })}\n          />\n        </div>\n\n        <Table.Provider columns={columns}>\n          <Table.Header />\n\n          <Table.Body rows={paginated.rows} rowKey=\"id\" />\n        </Table.Provider>\n\n        <div className=\"controls\">\n          <Paginator\n            pagination={pagination}\n            pages={paginated.amount}\n            onSelect={this.onSelect}\n          />\n        </div>\n      </div>\n    );\n  }\n  onSelect(page) {\n    const pages = Math.ceil(\n      this.state.rows.length / this.state.pagination.perPage\n    );\n\n    this.setState({\n      pagination: {\n        ...this.state.pagination,\n        page: Math.min(Math.max(page, 1), pages)\n      }\n    });\n  }\n}\n\n<PaginationTable />\n```\n"}});