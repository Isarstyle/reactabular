webpackJsonp([29],{1505:function(n,e,t){var a=t(1),r=t(14),s=t(15).PageRenderer;s.__esModule&&(s=s.default);var o=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1538)}},componentWillMount:function(){},render:function(){return a.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});o.__catalog_loader__=!0,n.exports=o},1538:function(n,e){n.exports="In addition to `header` customization, it's essential to define how the rows should map to content. This is achieved through `cell` fields.\n\n## **`cell.transforms`**\n\n```javascript\ncell.transforms = [\n  (\n    <value>, {\n      columnIndex: <number>,\n      column: <object>,\n      rowData: <object>,\n      rowIndex: <number>,\n      property: <string>\n    }\n  ) => ({... props ...})\n]\n```\n\n`cell.transforms` follows the same idea as `header.transforms`. This time `value` is the resolved `property` and we have extra rows available.\n\n**Example:**\n\n```javascript\n{\n  cell: {\n    transforms: [editable(edit.input())]\n  }\n}\n```\n\n## **`cell.formatters = [value => <string|React element>]`**\n\nThe idea here is the same as for `header.formatters`.\n\n**Example:**\n\n```javascript\n{\n  cell: {\n    property: 'salary',\n    formatters: [\n      (salary, extra) => (\n        <span onDoubleClick={() => alert(`salary is ${salary}`)}>\n          {search.highlightCell(salary, extra)}\n        </span>\n      )\n    ]\n  }\n}\n```\n\n## **`cell.props = <object>`**\n\nYou can set cell specific props through `props`.\n\n**Example:**\n\n```javascript\n{\n  cell: {\n    props: {\n      style: {\n        width: 100\n      }\n    }\n  }\n}\n```\n"}});