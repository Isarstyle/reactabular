webpackJsonp([27],{1504:function(n,e,t){var a=t(1),r=t(14),o=t(15).PageRenderer;o.__esModule&&(o=o.default);var s=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1537)}},componentWillMount:function(){},render:function(){return a.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});s.__catalog_loader__=!0,n.exports=s},1537:function(n,e){n.exports="The `header` portion supports `label`, `transforms` and `formatters` fields.\n\n## **`header.label = <string>`**\n\n`label` is the most essential as it describes the value displayed to the user. This should be a string. For example search options are populated based on this.\n\n**Example:**\n\n```javascript\n{\n  header: {\n    label: 'Name'\n  }\n}\n```\n\nGiven you might want to attach custom functionality to a header, say sorting on click, it is possible to attach specific *transforms* to the header cell. The same idea works for table cells.\n\n## **`header.transforms`**\n\n```javascript\nheader.transforms = [\n  (<label>, {\n    columnIndex: <number>,\n    column: <object>\n  }\n) => ({... props ...})]\n```\n\nA transform is expected to return an object containing props. We can for instance inject `onClick` handler and perform sorting based on that. If a transform returns `children`, it will override rendering behavior making it possible to implement editors.\n\nThe idea of transforms is that they can inject `propTypes` to the current cell (same idea for header and content). In this case we inject `onClick` handler so that sorting works. If a transform returns `children`, it will override rendering behavior. This is useful for transforms like `edit`.\n\n**Example:**\n\n```javascript\n{\n  header: {\n    label: 'Name',\n    transforms: [sortable]\n  }\n}\n```\n\nTo give you a concrete example of overriding, consider the example below:\n\n```javascript\n{\n  header: {\n    label: 'Name',\n    transforms: [\n      () => ({\n        children: <span>override to show instead of value</span>\n      })\n    ]\n  }\n}\n```\n\n## **`header.formatters = [label => <string|React element>]`**\n\nIf manipulating `propTypes` isn't enough, you can `format` the output. This should return something React can display. The result will be displayed **within** a table cell.\n\nIn the following example we use it to inject an extra checkbox to the header cell.\n\n**Example:**\n\n```javascript\n{\n  header: {\n    label: 'Name',\n    formatters: [\n      name => (\n        <div>\n          <input\n            type=\"checkbox\"\n            onClick={() => console.log('clicked')}\n            style={{ width: '20px' }}\n          />\n          <span>{name}</span>\n        </div>\n      )\n    ]\n  }\n}\n```\n\n## **`header.props = <object>`**\n\nYou can set header specific props through `props`.\n\n**Example:**\n\n```javascript\n{\n  header: {\n    label: 'Name',\n    props: {\n      style: {\n        width: 100\n      }\n    }\n  }\n}\n```\n"}});